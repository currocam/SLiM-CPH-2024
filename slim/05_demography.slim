// set up a simple neutral simulation
initialize() {
	initializeMutationRate(2.36e-8);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 1e4);
	initializeRecombinationRate(1e-8);
	initializeSex("A");
}

// create the ancestral African population
1 early() {
	sim.addSubpop("p1", 731);
}
// Generation 58000 is the present. 
52080 early() {p1.setSubpopulationSize(1447);}
// Split non-Africans from Africans and set migration rates
55960 early() {
	// Populates with clonal copies from p1
	// Next generation, there'll be random mating between  individuals sampled
	// randomly from pop1 --> Enough to produce founder effect
	sim.addSubpopSplit("p2", 186, p1);
	p2.setMigrationRates(p1, 15e-5);
	p1.setMigrationRates(p2, 15e-5);
}

57080 early() {
	// Eropean and East Asian subpopulations
	sim.addSubpopSplit("p3", 55, p2);
	p2.setSubpopulationSize(103);
	// Set migration rates
	p1.setMigrationRates(c(p2, p3), c(2.5e-5, 0.78e-5));
	p2.setMigrationRates(c(p1, p3), c(2.5e-5, 3.11e-5));
	p3.setMigrationRates(c(p1, p2), c(0.78e-5, 3.11e-5));
}

57080:58000 early() {
	// Exponential growth in Europe and East Asia
	t = community.tick - 57080;
	p2_size = round(103*exp(0.0038*t));
	p3_size = round(55*exp(0.0048*t));
	
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

58000 late() {
	// YRI phase 3 sample of size 108
	p1.outputSample(216);
	// CEU phase 3 sample of size 99
	p2.outputSample(99);
	// CHB phase 3 sample of size 103
	p3.outputSample(103);
}
58001 early() {
	sim.addSubpop("p4", 90000);
	// Crosses between populations will happen next generation!!!
	p4.setMigrationRates(c(p1, p2, p3), c(0.3, 0.4, 0.3));
}

58001 late() {
	oldPops =	c(p1, p2, p3);
	// This is not a future request, we immediately remove them
	oldPops.setSubpopulationSize(0);
}
58010 early(){
	// Mars colony 	
	sim.addSubpopSplit("p5", 10, p4);
	p5.setCloningRate(1.0);
	// We don't sample from earth anymore, so just remove it
	p4.setSubpopulationSize(0);
}
58012:58020 early(){
	// Double their size
	p5.setSubpopulationSize(p5.individualCount*2);
}
58030 early() {
	p5.setCloningRate(0.0);
	//p5.setSelfingRate(0.2);
}
60000 early() {
	sim.simulationFinished();
}